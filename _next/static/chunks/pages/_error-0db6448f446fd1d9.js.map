{"version":3,"file":"static/chunks/pages/_error-0db6448f446fd1d9.js","mappings":"AIACA,CAAAA,KAAK,gBAAmB,CAAGA,KAAK,gBAAmB,EAAI,EAAE,EAAEC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAElE,KACC,SAASC,CAAuB,CAAEC,CAAwB,CAAEC,CAAmB,CAAE,CJDxF,CAAAC,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAL,IAAA,EACA,UACA,UAAe,CACf,OAAAG,EAAA,KACA,EACA,CAKA,gBAAAF,CAAA,CAAAK,CAAA,CAAAH,CAAA,eAAAA,EAAAI,CAAA,CAAAD,GAAAH,EAAAK,CAAA,CAAAF,EAAA,2BAAAG,CAAA,QAAAC,EAAAP,EAAA,MAAAQ,EAAAR,EAAA,MAAAS,EAAAT,EAAA,MAAAU,EAAAV,EAAA,MCGA,eAAUW,EAAgBC,CAAA,MAAAC,IAAAA,CAAA,CAAAC,IAAAA,CAAA,CAAAC,IAAAA,CAAA,EAAAH,EAI1BI,EAAA,GAAAF,EAAAE,UAAA,EAAAJ,EAAAI,UAAA,CACA,GAAAA,GAAAA,EAAA,KAWA,CAAAJ,EAAAK,QAAA,CAVA,OAAAC,QAAAC,OAAA,GAcA,GAAAV,EAAAW,EAAA,EAAAC,GAAA,CACAA,EAAMC,iBAAA,CAAAC,IACN,GAAAb,EAAAc,EAAA,EAAAD,EAAA,CACAE,KAAA,aACAC,QAAA,GACAC,KAAA,CACSC,SAAA,wBACF,CACP,GACKL,IAGLV,GACAQ,EAAAQ,wBAAA,EAAAC,QAAAjB,CAAA,GAKG,GAAAJ,EAAAsB,EAAA,EAAAhB,GAAA,sCAAAA,EAAA,MAKH,MAAAiB,SArDAC,CAAiB,EACjB,IAAAC,EAAA,GAAA1B,EAAA2B,EAAA,IAAAC,SAAA,GACA,OAAAF,EAAAA,EAAAF,KAAA,CAmDA,KAnDAd,QAAAC,OAAA,MAmDA,GAGA,IAAAkB,EAAArC,EAAA,KCvC6C,IAC3CsC,EAAA,GAIuC,CAAM,EAAA/B,EAAUgC,GAAA,EAAAF,EAAA,SAAArB,WAAAwB,EAAAxB,UAAA,EAIUsB,CAAAA,EACjEG,eAAA,OAAAC,IAIA,MAAA/B,EAAA+B,GAEFL,EAAA,QAAAI,eAAA,CAAAC,IAEoC,IAAApC,EAAAgC,CAAA,eAAAK,CAAA,CAAA5C,CAAA,CAAAC,CAAA,ECxCW2C,EAAAC,OAAA,CAAA5C,EAAA,iBAAAA,CAAA,EAAAA,EAAA6C,CAAA,mCAAA7C,EAAAA,EAAA8C,CAAA,SAAAC,KAAA/C,EAAA6C,CAAA","sources":["webpack://_N_E/?cf31","webpack://_N_E/../../node_modules/@sentry/nextjs/esm/utils/_error.js","webpack://_N_E/./pages/_error.tsx","webpack://_N_E/../../node_modules/next/error.js","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_error\",\n      function () {\n        return require(\"private-next-pages/_error.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/_error\"])\n      });\n    }\n  ","import { getCurrentHub, withScope, captureException } from '@sentry/core';\nimport { addExceptionMechanism } from '@sentry/utils';\n\n/** Platform-agnostic version of `flush` */\nfunction flush(timeout) {\n  const client = getCurrentHub().getClient();\n  return client ? client.flush(timeout) : Promise.resolve(false);\n}\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nasync function captureUnderscoreErrorException(contextOrProps) {\n  const { req, res, err } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = (res && res.statusCode) || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n  // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n  // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n  // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n  // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n  // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n  // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n  if (!contextOrProps.pathname) {\n    return Promise.resolve();\n  }\n\n  withScope(scope => {\n    scope.addEventProcessor(event => {\n      addExceptionMechanism(event, {\n        type: 'instrument',\n        handled: true,\n        data: {\n          function: '_error.getInitialProps',\n        },\n      });\n      return event;\n    });\n\n    if (req) {\n      scope.setSDKProcessingMetadata({ request: req });\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    captureException(err || `_error.js called with falsy error (${err})`);\n  });\n\n  // In case this is being run as part of a serverless function (as is the case with the server half of nextjs apps\n  // deployed to vercel), make sure the error gets sent to Sentry before the lambda exits.\n  await flush(2000);\n}\n\nexport { captureUnderscoreErrorException };\n//# sourceMappingURL=_error.js.map\n","/**\n * NOTE: This requires `@sentry/nextjs` version 7.3.0 or higher.\n *\n * NOTE: If using this with `next` version 12.2.0 or lower, uncomment the\n * penultimate line in `CustomErrorComponent`.\n *\n * This page is loaded by Nextjs:\n *  - on the server, when data-fetching methods throw or reject\n *  - on the client, when `getInitialProps` throws or rejects\n *  - on the client, when a React lifecycle method throws or rejects, and it's\n *    caught by the built-in Nextjs error boundary\n *\n * See:\n *  - https://nextjs.org/docs/basic-features/data-fetching/overview\n *  - https://nextjs.org/docs/api-reference/data-fetching/get-initial-props\n *  - https://reactjs.org/docs/error-boundaries.html\n */\n\nimport * as Sentry from '@sentry/nextjs';\nimport NextErrorComponent from 'next/error';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst CustomErrorComponent = (props: any) => {\n  // If you're using a Nextjs version prior to 12.2.1, uncomment this to\n  // compensate for https://github.com/vercel/next.js/issues/8592\n  // Sentry.captureUnderscoreErrorException(props);\n\n  return <NextErrorComponent statusCode={props.statusCode} />;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nCustomErrorComponent.getInitialProps = async (contextData: any) => {\n  // In case this is running in a serverless function, await this in order to give Sentry\n  // time to send the error before the lambda exits\n  await Sentry.captureUnderscoreErrorException(contextData);\n\n  // This will contain the status code of the response\n  return NextErrorComponent.getInitialProps(contextData);\n};\n\nexport default CustomErrorComponent;\n","module.exports = require('./dist/pages/_error')\n","(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[820],{\n\n/***/ 1458:\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {\n\n\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_error\",\n      function () {\n        return __webpack_require__(5586);\n      }\n    ]);\n    if(false) {}\n  \n\n/***/ }),\n\n/***/ 5586:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": function() { return /* binding */ _error; }\n});\n\n// EXTERNAL MODULE: ../../node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(2322);\n// EXTERNAL MODULE: ../../node_modules/@sentry/core/esm/hub.js\nvar hub = __webpack_require__(6465);\n// EXTERNAL MODULE: ../../node_modules/@sentry/core/esm/exports.js\nvar esm_exports = __webpack_require__(2642);\n// EXTERNAL MODULE: ../../node_modules/@sentry/utils/esm/misc.js\nvar misc = __webpack_require__(3699);\n;// CONCATENATED MODULE: ../../node_modules/@sentry/nextjs/esm/utils/_error.js\n\n\n\n/** Platform-agnostic version of `flush` */\nfunction flush(timeout) {\n  const client = (0,hub/* getCurrentHub */.Gd)().getClient();\n  return client ? client.flush(timeout) : Promise.resolve(false);\n}\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nasync function captureUnderscoreErrorException(contextOrProps) {\n  const { req, res, err } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = (res && res.statusCode) || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n  // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n  // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n  // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n  // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n  // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n  // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n  if (!contextOrProps.pathname) {\n    return Promise.resolve();\n  }\n\n  (0,esm_exports/* withScope */.$e)(scope => {\n    scope.addEventProcessor(event => {\n      (0,misc/* addExceptionMechanism */.EG)(event, {\n        type: 'instrument',\n        handled: true,\n        data: {\n          function: '_error.getInitialProps',\n        },\n      });\n      return event;\n    });\n\n    if (req) {\n      scope.setSDKProcessingMetadata({ request: req });\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    (0,esm_exports/* captureException */.Tb)(err || `_error.js called with falsy error (${err})`);\n  });\n\n  // In case this is being run as part of a serverless function (as is the case with the server half of nextjs apps\n  // deployed to vercel), make sure the error gets sent to Sentry before the lambda exits.\n  await flush(2000);\n}\n\n\n//# sourceMappingURL=_error.js.map\n\n// EXTERNAL MODULE: ../../node_modules/next/error.js\nvar error = __webpack_require__(689);\n;// CONCATENATED MODULE: ./pages/_error.tsx\n/**\n * NOTE: This requires `@sentry/nextjs` version 7.3.0 or higher.\n *\n * NOTE: If using this with `next` version 12.2.0 or lower, uncomment the\n * penultimate line in `CustomErrorComponent`.\n *\n * This page is loaded by Nextjs:\n *  - on the server, when data-fetching methods throw or reject\n *  - on the client, when `getInitialProps` throws or rejects\n *  - on the client, when a React lifecycle method throws or rejects, and it's\n *    caught by the built-in Nextjs error boundary\n *\n * See:\n *  - https://nextjs.org/docs/basic-features/data-fetching/overview\n *  - https://nextjs.org/docs/api-reference/data-fetching/get-initial-props\n *  - https://reactjs.org/docs/error-boundaries.html\n */ \n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst CustomErrorComponent = (props)=>{\n    // If you're using a Nextjs version prior to 12.2.1, uncomment this to\n    // compensate for https://github.com/vercel/next.js/issues/8592\n    // Sentry.captureUnderscoreErrorException(props);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(error[\"default\"], {\n        statusCode: props.statusCode\n    });\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nCustomErrorComponent.getInitialProps = async (contextData)=>{\n    // In case this is running in a serverless function, await this in order to give Sentry\n    // time to send the error before the lambda exits\n    await captureUnderscoreErrorException(contextData);\n    // This will contain the status code of the response\n    return error[\"default\"].getInitialProps(contextData);\n};\n/* harmony default export */ var _error = (CustomErrorComponent);\n\n\n/***/ }),\n\n/***/ 689:\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(2906)\n\n\n/***/ })\n\n},\n/******/ function(__webpack_require__) { // webpackRuntimeModules\n/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }\n/******/ __webpack_require__.O(0, [774,888,179], function() { return __webpack_exec__(1458); });\n/******/ var __webpack_exports__ = __webpack_require__.O();\n/******/ _N_E = __webpack_exports__;\n/******/ }\n]);"],"names":["self","push","__unused_webpack_module","__unused_webpack_exports","__webpack_require__","window","__NEXT_P","__webpack_exports__","r","d","_error","jsx_runtime","hub","esm_exports","misc","captureUnderscoreErrorException","contextOrProps","req","res","err","statusCode","pathname","Promise","resolve","$e","scope","addEventProcessor","event","EG","type","handled","data","function","setSDKProcessingMetadata","request","Tb","flush","timeout","client","Gd","getClient","error","CustomErrorComponent","jsx","props","getInitialProps","contextData","module","exports","O","s","_N_E"],"sourceRoot":""}