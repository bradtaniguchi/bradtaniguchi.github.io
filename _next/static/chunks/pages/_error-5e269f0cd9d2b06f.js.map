{"version":3,"file":"static/chunks/pages/_error-5e269f0cd9d2b06f.js","mappings":"oFACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,UACA,WACA,OAAeC,EAAQ,KACvB,EACA,8HCQA,eAAAC,EAAAC,CAAA,EACA,IAAUC,IAAAA,CAAA,CAAAC,IAAAA,CAAA,CAAAC,IAAAA,CAAA,EAAgBH,EAG1BI,EAAA,GAAAF,EAAAE,UAAA,EAAAJ,EAAAI,UAAA,CACA,GAAAA,GAAAA,EAAA,KAWA,CAAAJ,EAAAK,QAAA,CAVA,OAAAC,QAAAC,OAAA,EACA,CAaE,GAAAC,EAAAC,EAAA,EAASC,GAAA,CACXA,EAAAC,iBAAA,CAAAC,IACM,GAAAC,EAAAC,EAAA,EAAqBF,EAAA,CAC3BG,KAAA,aACAC,QAAA,GACAC,KAAA,CACAC,SAAA,wBACA,CACA,GACAN,IAGAX,GACAS,EAAAS,wBAAA,EAAuCC,QAAAnB,CAAA,GAKnC,GAAAO,EAAAa,EAAA,EAAgBlB,GAAA,sCAA8CA,EAAI,GACtE,GAIA,MAAAmB,SArDAC,CAAA,EACA,IAAAC,EAAiB,GAAAC,EAAAC,EAAA,IAAaC,SAAA,GAC9B,OAAAH,EAAAA,EAAAF,KAAA,CAmDA,KAnDAhB,QAAAC,OAAA,MAmDA,EACA,uBCpCA,IAAMqB,EAAuB,GAKpB,GAAAC,EAAAC,GAAA,EAACC,IAAkBA,CAAC3B,WAAY4B,EAAM5B,UAAU,EAIzDwB,CAAAA,EAAqBK,eAAe,CAAG,MAAOC,IAG5C,MAAMC,EAAuCD,GAGtCH,IAAAA,eAAkC,CAACG,IAG5C,IAAAE,EAAeR,uBCxCfS,EAAAC,OAAA,CAAAxC,EAAA","sources":["webpack://_N_E/?cf31","webpack://_N_E/../../node_modules/@sentry/nextjs/esm/utils/_error.js","webpack://_N_E/./pages/_error.tsx","webpack://_N_E/../../node_modules/next/error.js","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_error\",\n      function () {\n        return require(\"private-next-pages/_error.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/_error\"])\n      });\n    }\n  ","import { getCurrentHub, withScope, captureException } from '@sentry/core';\nimport { addExceptionMechanism } from '@sentry/utils';\n\n/** Platform-agnostic version of `flush` */\nfunction flush(timeout) {\n  const client = getCurrentHub().getClient();\n  return client ? client.flush(timeout) : Promise.resolve(false);\n}\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nasync function captureUnderscoreErrorException(contextOrProps) {\n  const { req, res, err } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = (res && res.statusCode) || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n  // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n  // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n  // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n  // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n  // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n  // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n  if (!contextOrProps.pathname) {\n    return Promise.resolve();\n  }\n\n  withScope(scope => {\n    scope.addEventProcessor(event => {\n      addExceptionMechanism(event, {\n        type: 'instrument',\n        handled: true,\n        data: {\n          function: '_error.getInitialProps',\n        },\n      });\n      return event;\n    });\n\n    if (req) {\n      scope.setSDKProcessingMetadata({ request: req });\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    captureException(err || `_error.js called with falsy error (${err})`);\n  });\n\n  // In case this is being run as part of a serverless function (as is the case with the server half of nextjs apps\n  // deployed to vercel), make sure the error gets sent to Sentry before the lambda exits.\n  await flush(2000);\n}\n\nexport { captureUnderscoreErrorException };\n//# sourceMappingURL=_error.js.map\n","/**\n * NOTE: This requires `@sentry/nextjs` version 7.3.0 or higher.\n *\n * NOTE: If using this with `next` version 12.2.0 or lower, uncomment the\n * penultimate line in `CustomErrorComponent`.\n *\n * This page is loaded by Nextjs:\n *  - on the server, when data-fetching methods throw or reject\n *  - on the client, when `getInitialProps` throws or rejects\n *  - on the client, when a React lifecycle method throws or rejects, and it's\n *    caught by the built-in Nextjs error boundary\n *\n * See:\n *  - https://nextjs.org/docs/basic-features/data-fetching/overview\n *  - https://nextjs.org/docs/api-reference/data-fetching/get-initial-props\n *  - https://reactjs.org/docs/error-boundaries.html\n */\n\nimport * as Sentry from '@sentry/nextjs';\nimport NextErrorComponent from 'next/error';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst CustomErrorComponent = (props: any) => {\n  // If you're using a Nextjs version prior to 12.2.1, uncomment this to\n  // compensate for https://github.com/vercel/next.js/issues/8592\n  // Sentry.captureUnderscoreErrorException(props);\n\n  return <NextErrorComponent statusCode={props.statusCode} />;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nCustomErrorComponent.getInitialProps = async (contextData: any) => {\n  // In case this is running in a serverless function, await this in order to give Sentry\n  // time to send the error before the lambda exits\n  await Sentry.captureUnderscoreErrorException(contextData);\n\n  // This will contain the status code of the response\n  return NextErrorComponent.getInitialProps(contextData);\n};\n\nexport default CustomErrorComponent;\n","module.exports = require('./dist/pages/_error')\n"],"names":["window","__NEXT_P","push","__webpack_require__","captureUnderscoreErrorException","contextOrProps","req","res","err","statusCode","pathname","Promise","resolve","esm_exports","$e","scope","addEventProcessor","event","misc","EG","type","handled","data","function","setSDKProcessingMetadata","request","Tb","flush","timeout","client","hub","Gd","getClient","CustomErrorComponent","jsx_runtime","jsx","NextErrorComponent","props","getInitialProps","contextData","Sentry","_error","module","exports"],"sourceRoot":""}